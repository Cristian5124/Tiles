#BlueJ class context
comment0.target=Puzzle
comment0.text=\r\n\ La\ clase\ Puzzle\ se\ encarga\ de\ manejar\ el\ estado\ del\ rompecabezas\ y\ las\ operaciones\ que\ se\ pueden\ realizar\ sobre\ \u00E9l.\r\n\ \r\n\ @author\ Angie\ Ramos\ and\ Cristian\ Polo\r\n\ @version\ 1.0\ \ (08\ septiembre\ 2024)\r\n
comment1.params=h\ w
comment1.target=Puzzle(int,\ int)
comment1.text=\r\n\ Inicializa\ un\ rompecabezas\ \r\n\ @param\ h\ altura\ del\ rompecabezas\ \#filas\r\n\ @param\ w\ anchura\ del\ rompecabezas\ \#columnas\r\n
comment10.params=direction
comment10.target=void\ tilt(char)
comment11.params=
comment11.target=boolean\ isGoal()
comment11.text=\r\n\ Verifica\ si\ la\ disposici\u00F3n\ actual\ del\ rompecabezas\ coincide\ con\ la\ disposici\u00F3n\ final\ deseada\r\n
comment12.params=
comment12.target=int[][]\ actualArrangement()
comment12.text=\r\n\ Devuelve\ la\ disposici\u00F3n\ actual\ del\ rompecabezas\r\n
comment13.params=
comment13.target=void\ makeVisible()
comment13.text=\r\n\ Hace\ visible\ el\ rompecabezas\ y\ todas\ sus\ baldosas\r\n
comment14.params=
comment14.target=void\ makeInvisible()
comment14.text=\r\n\ Hace\ invisible\ el\ rompecabezas\ y\ todas\ sus\ baldosas\r\n
comment15.params=
comment15.target=void\ finish()
comment16.params=row\ column
comment16.target=boolean\ isValidPosition(int,\ int)
comment16.text=\r\n\ Verifica\ si\ una\ posici\u00F3n\ espec\u00EDfica\ dentro\ del\ rompecabezas\ es\ v\u00E1lida\r\n\ Una\ posici\u00F3n\ es\ considerada\ v\u00E1lida\ si\ tanto\ la\ "row"\ como\ la\ "column"\ est\u00E1n\ dentro\ de\ los\ l\u00EDmites\ permitidos\ del\ rompecabezas,\ \r\n\ es\ decir,\ si\ la\ fila\ y\ la\ columna\ se\ encuentran\ dentro\ del\ rango\ definido\ por\ las\ dimensiones\ del\ rompecabezas\ ("height"\ y\ "width")\r\n\ @param\ row\ \ fila\ de\ la\ posici\u00F3n\ a\ verificar\r\n\ @param\ column\ columna\ de\ la\ posici\u00F3n\ a\ verificar.\r\n
comment17.params=row\ column
comment17.target=Tile\ findTile(int,\ int)
comment17.text=\r\n\ Busca\ una\ baldosa\ en\ la\ lista\ de\ baldosas\ que\ se\ encuentra\ en\ una\ posici\u00F3n\ espec\u00EDfica\r\n\ Recorre\ la\ lista\ de\ baldosas\ "tiles"\ y\ compara\ la\ fila\ y\ la\ columna\ de\ cada\ baldosa\ con\ las\ coordenadas\ proporcionadas.\ Si\ \r\n\ encuentra\ una\ baldosa\ en\ la\ posici\u00F3n\ especificada,\ la\ devuelve,\ si\ no\ se\ encuentra\ ninguna\ baldosa\ en\ esa\ posici\u00F3n,\ devuelve\ "null"\r\n\ @param\ row\ fila\ de\ la\ posici\u00F3n\ en\ la\ que\ se\ busca\ la\ baldosa\r\n\ @param\ column\ columna\ de\ la\ posici\u00F3n\ en\ la\ que\ se\ busca\ la\ baldosa\r\n
comment2.params=ending
comment2.target=Puzzle(int[][])
comment2.text=\r\n\ Inicializa\ un\ rompecabezas\ a\ partir\ de\ una\ disposicion\ final\r\n\ @param\ ending\ disposici\u00F3n\ final\ deseada\ del\ rompecabezas\ representada\ como\ un\ arreglo\ bidimensional\ de\ enteros\r\n
comment3.params=starting\ ending
comment3.target=Puzzle(int[][],\ int[][])
comment3.text=\r\n\ inicializa\ un\ nuevo\ rompecabezas\ a\ partir\ de\ una\ disposici\u00F3n\ inicial\ y\ una\ disposici\u00F3n\ final\ dadas\r\n\ @param\ starting\ disposicion\ inicial\ \r\n\ @param\ ending\ disposicion\ final\ \r\n
comment4.params=
comment4.target=void\ initializeEmptyPuzzle()
comment4.text=\r\n\ Inicializa\ el\ rompecabezas\ vac\u00EDo\r\n
comment5.params=row\ column\ color
comment5.target=void\ addTile(int,\ int,\ java.lang.String)
comment5.text=\r\n\ Agrega\ una\ baldosa\ al\ rompecabezas\ en\ la\ posici\u00F3n\ especificada\ por\ la\ fila\ y\ columna,y\ con\ el\ color\ indicado.\ Si\ la\ posici\u00F3n\ es\ v\u00E1lida,\ se\ actualiza\ la\ disposici\u00F3n\ inicial,\r\n\ se\ crea\ la\ baldosa\ y\ se\ a\u00F1ade\ a\ la\ lista\ de\ baldosas.\ Si\ el\ rompecabezas\ es\ visible,\ la\ baldosa\ tambi\u00E9n\ se\ muestra\ en\ pantalla.\r\n\ @param\ row\ fila\ en\ la\ que\ se\ agregar\u00E1\ la\ baldosa\r\n\ @param\ column\ columna\ en\ la\ que\ se\ agregar\u00E1\ la\ baldosa\r\n\ @param\ color\ color\ de\ la\ baldosa,\ como\ cadena\ de\ texto\r\n
comment6.params=row\ column
comment6.target=void\ deleteTile(int,\ int)
comment6.text=\r\n\ Elimina\ una\ baldosa\ del\ rompecabezas\ en\ la\ posici\u00F3n\ espec\u00EDficada.\ Si\ la\ posici\u00F3n\ es\ v\u00E1lida\ y\ existe\ una\ baldosa\ en\ esa\ ubicaci\u00F3n,\ \r\n\ se\ actualiza\ la\ disposici\u00F3n\ inicial,\ se\ hace\ invisible\ la\ baldosa\ y\ se\ elimina\ de\ la\ lista\ de\ baldosas\r\n\ @param\ row\ fila\ que\ corresponde\ a\ la\ baldosa\ que\ se\ desea\ eliminar\r\n\ @param\ column\ columna\ que\ corresponde\ a\ la\ baldosa\ que\ se\ desea\ eliminar\r\n
comment7.params=from\ to
comment7.target=void\ relocateTile(int[],\ int[])
comment7.text=\r\n\ Reubica\ una\ baldosa\ dentro\ del\ rompecabezas,\ movi\u00E9ndola\ de\ una\ posici\u00F3n\ inicial\ a\ una\ nueva\ posici\u00F3n\ especificada.\ Si\ ambas\ \r\n\ posiciones\ son\ v\u00E1lidas,\ la\ disposici\u00F3n\ inicial\ se\ actualiza\ y\ la\ baldosa\ se\ mueve\r\n\ @param\ from\ arreglo\ de\ enteros\ que\ representa\ la\ posici\u00F3n\ inicial\ [fila,\ columna]\ desde\ donde\ se\ mover\u00E1\ la\ baldosa\r\n\ @param\ to\ "\ posici\u00F3n\ a\ la\ que\ se\ mover\u00E1\ la\ baldosa\r\n
comment8.params=row\ column
comment8.target=void\ addGlue(int,\ int)
comment8.text=\r\n\ Agrega\ pegante\ en\ la\ posici\u00F3n\ especificada\ del\ rompecabezas\r\n\ @param\ row\ fila\ a\ la\ que\ se\ agrega\ pegante\r\n\ @param\ column\ columna\ a\ la\ que\ se\ agrega\ pegante\r\n
comment9.params=row\ column
comment9.target=void\ deleteGlue(int,\ int)
comment9.text=\r\n\ Elimina\ pegante\ en\ la\ posici\u00F3n\ especificada\ del\ rompecabezas\r\n\ @param\ row\ fila\ a\ la\ que\ se\ le\ elimina\ el\ pegante\r\n\ @param\ column\ columna\ a\ la\ que\ se\ le\ elimina\ el\ pegante\r\n
numComments=18
